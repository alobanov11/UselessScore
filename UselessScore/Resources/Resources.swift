//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 5 colors.
  struct color {
    /// Color `accent`.
    static let accent = Rswift.ColorResource(bundle: R.hostingBundle, name: "accent")
    /// Color `background`.
    static let background = Rswift.ColorResource(bundle: R.hostingBundle, name: "background")
    /// Color `secondaryBackground`.
    static let secondaryBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondaryBackground")
    /// Color `secondaryText`.
    static let secondaryText = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondaryText")
    /// Color `text`.
    static let text = Rswift.ColorResource(bundle: R.hostingBundle, name: "text")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "accent", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accent, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondaryBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondaryText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "text", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func text(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.text, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Constants.plist`.
    static let constantsPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Constants", pathExtension: "plist")

    /// `bundle.url(forResource: "Constants", withExtension: "plist")`
    static func constantsPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.constantsPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    /// This `R.image.icons` struct is generated, and contains static references to 2 images.
    struct icons {
      /// Image `back`.
      static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icons/back")
      /// Image `menu`.
      static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icons/menu")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
      static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.back, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
      static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.menu, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 24 localization keys.
    struct localizable {
      /// en translation: An error has occurred
      ///
      /// Locales: en, ru
      static let errorTitle = Rswift.StringResource(key: "error.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Application error, please contact us
      ///
      /// Locales: en, ru
      static let errorCantDecode = Rswift.StringResource(key: "error.cantDecode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, ru
      static let commonBack = Rswift.StringResource(key: "common.back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Buy now for %s
      ///
      /// Locales: en, ru
      static let commonBuy = Rswift.StringResource(key: "common.buy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, ru
      static let commonCancel = Rswift.StringResource(key: "common.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: In-App Purchase process was blocked.
      ///
      /// Locales: en, ru
      static let errorCantBuy = Rswift.StringResource(key: "error.cantBuy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: In-App Purchase process was cancelled.
      ///
      /// Locales: en, ru
      static let errorPaymentWasCancelled = Rswift.StringResource(key: "error.paymentWasCancelled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: In-App Purchase restore failed.
      ///
      /// Locales: en, ru
      static let errorCantRestore = Rswift.StringResource(key: "error.cantRestore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Information
      ///
      /// Locales: en, ru
      static let infoTitle = Rswift.StringResource(key: "info.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Me
      ///
      /// Locales: en, ru
      static let commonMe = Rswift.StringResource(key: "common.me", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Me today
      ///
      /// Locales: en, ru
      static let counterMySubtitle = Rswift.StringResource(key: "counter.mySubtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Multiplier %s
      ///
      /// Locales: en, ru
      static let counterMultiplier = Rswift.StringResource(key: "counter.multiplier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: No In-App Purchase product identifiers were found.
      ///
      /// Locales: en, ru
      static let errorNoProductIDsFound = Rswift.StringResource(key: "error.noProductIDsFound", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: No In-App Purchases were found.
      ///
      /// Locales: en, ru
      static let errorNoProductsFound = Rswift.StringResource(key: "error.noProductsFound", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Restore purchases
      ///
      /// Locales: en, ru
      static let commonRestore = Rswift.StringResource(key: "common.restore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Server error, please try later
      ///
      /// Locales: en, ru
      static let errorServerError = Rswift.StringResource(key: "error.serverError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Success buy multiplier
      ///
      /// Locales: en, ru
      static let counterMultiplierSuccessBuy = Rswift.StringResource(key: "counter.multiplierSuccessBuy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Top for all time
      ///
      /// Locales: en, ru
      static let ratingTopForAllTime = Rswift.StringResource(key: "rating.topForAllTime", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Top in all time
      ///
      /// Locales: en, ru
      static let counterTopSubtitle = Rswift.StringResource(key: "counter.topSubtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Total amount
      ///
      /// Locales: en, ru
      static let counterAmountSubtitle = Rswift.StringResource(key: "counter.amountSubtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Unable to fetch available In-App Purchase products at the moment.
      ///
      /// Locales: en, ru
      static let errorProductRequestFailed = Rswift.StringResource(key: "error.productRequestFailed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Unknown error, please try later
      ///
      /// Locales: en, ru
      static let errorUnknown = Rswift.StringResource(key: "error.unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: You have max multiplier
      ///
      /// Locales: en, ru
      static let counterMultiplierInfo = Rswift.StringResource(key: "counter.multiplierInfo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: of %d in %d day(s)
      ///
      /// Locales: en, ru
      static let counterNumberOfParticipants = Rswift.StringResource(key: "counter.numberOfParticipants", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)

      /// en translation: An error has occurred
      ///
      /// Locales: en, ru
      static func errorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.title"
        }

        return NSLocalizedString("error.title", bundle: bundle, comment: "")
      }

      /// en translation: Application error, please contact us
      ///
      /// Locales: en, ru
      static func errorCantDecode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.cantDecode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.cantDecode"
        }

        return NSLocalizedString("error.cantDecode", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, ru
      static func commonBack(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.back", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.back"
        }

        return NSLocalizedString("common.back", bundle: bundle, comment: "")
      }

      /// en translation: Buy now for %s
      ///
      /// Locales: en, ru
      static func commonBuy(_ value1: UnsafePointer<CChar>, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("common.buy", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.buy"
        }

        let format = NSLocalizedString("common.buy", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Cancel
      ///
      /// Locales: en, ru
      static func commonCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.cancel"
        }

        return NSLocalizedString("common.cancel", bundle: bundle, comment: "")
      }

      /// en translation: In-App Purchase process was blocked.
      ///
      /// Locales: en, ru
      static func errorCantBuy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.cantBuy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.cantBuy"
        }

        return NSLocalizedString("error.cantBuy", bundle: bundle, comment: "")
      }

      /// en translation: In-App Purchase process was cancelled.
      ///
      /// Locales: en, ru
      static func errorPaymentWasCancelled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.paymentWasCancelled", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.paymentWasCancelled"
        }

        return NSLocalizedString("error.paymentWasCancelled", bundle: bundle, comment: "")
      }

      /// en translation: In-App Purchase restore failed.
      ///
      /// Locales: en, ru
      static func errorCantRestore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.cantRestore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.cantRestore"
        }

        return NSLocalizedString("error.cantRestore", bundle: bundle, comment: "")
      }

      /// en translation: Information
      ///
      /// Locales: en, ru
      static func infoTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("info.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "info.title"
        }

        return NSLocalizedString("info.title", bundle: bundle, comment: "")
      }

      /// en translation: Me
      ///
      /// Locales: en, ru
      static func commonMe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.me", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.me"
        }

        return NSLocalizedString("common.me", bundle: bundle, comment: "")
      }

      /// en translation: Me today
      ///
      /// Locales: en, ru
      static func counterMySubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("counter.mySubtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "counter.mySubtitle"
        }

        return NSLocalizedString("counter.mySubtitle", bundle: bundle, comment: "")
      }

      /// en translation: Multiplier %s
      ///
      /// Locales: en, ru
      static func counterMultiplier(_ value1: UnsafePointer<CChar>, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("counter.multiplier", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "counter.multiplier"
        }

        let format = NSLocalizedString("counter.multiplier", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: No In-App Purchase product identifiers were found.
      ///
      /// Locales: en, ru
      static func errorNoProductIDsFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.noProductIDsFound", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.noProductIDsFound"
        }

        return NSLocalizedString("error.noProductIDsFound", bundle: bundle, comment: "")
      }

      /// en translation: No In-App Purchases were found.
      ///
      /// Locales: en, ru
      static func errorNoProductsFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.noProductsFound", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.noProductsFound"
        }

        return NSLocalizedString("error.noProductsFound", bundle: bundle, comment: "")
      }

      /// en translation: Restore purchases
      ///
      /// Locales: en, ru
      static func commonRestore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.restore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.restore"
        }

        return NSLocalizedString("common.restore", bundle: bundle, comment: "")
      }

      /// en translation: Server error, please try later
      ///
      /// Locales: en, ru
      static func errorServerError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.serverError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.serverError"
        }

        return NSLocalizedString("error.serverError", bundle: bundle, comment: "")
      }

      /// en translation: Success buy multiplier
      ///
      /// Locales: en, ru
      static func counterMultiplierSuccessBuy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("counter.multiplierSuccessBuy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "counter.multiplierSuccessBuy"
        }

        return NSLocalizedString("counter.multiplierSuccessBuy", bundle: bundle, comment: "")
      }

      /// en translation: Top for all time
      ///
      /// Locales: en, ru
      static func ratingTopForAllTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rating.topForAllTime", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "rating.topForAllTime"
        }

        return NSLocalizedString("rating.topForAllTime", bundle: bundle, comment: "")
      }

      /// en translation: Top in all time
      ///
      /// Locales: en, ru
      static func counterTopSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("counter.topSubtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "counter.topSubtitle"
        }

        return NSLocalizedString("counter.topSubtitle", bundle: bundle, comment: "")
      }

      /// en translation: Total amount
      ///
      /// Locales: en, ru
      static func counterAmountSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("counter.amountSubtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "counter.amountSubtitle"
        }

        return NSLocalizedString("counter.amountSubtitle", bundle: bundle, comment: "")
      }

      /// en translation: Unable to fetch available In-App Purchase products at the moment.
      ///
      /// Locales: en, ru
      static func errorProductRequestFailed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.productRequestFailed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.productRequestFailed"
        }

        return NSLocalizedString("error.productRequestFailed", bundle: bundle, comment: "")
      }

      /// en translation: Unknown error, please try later
      ///
      /// Locales: en, ru
      static func errorUnknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.unknown"
        }

        return NSLocalizedString("error.unknown", bundle: bundle, comment: "")
      }

      /// en translation: You have max multiplier
      ///
      /// Locales: en, ru
      static func counterMultiplierInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("counter.multiplierInfo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "counter.multiplierInfo"
        }

        return NSLocalizedString("counter.multiplierInfo", bundle: bundle, comment: "")
      }

      /// en translation: of %d in %d day(s)
      ///
      /// Locales: en, ru
      static func counterNumberOfParticipants(_ value1: Int, _ value2: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("counter.numberOfParticipants", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "counter.numberOfParticipants"
        }

        let format = NSLocalizedString("counter.numberOfParticipants", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
